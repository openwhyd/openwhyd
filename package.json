{
  "name": "openwhyd",
  "version": "1.56.7",
  "description": "A web app for collecting, playing and sharing music from various streaming platforms: Youtube, Soundcloud, Bandcamp, Vimeo, Deezer...",
  "homepage": "https://openwhyd.org",
  "license": "MIT",
  "main": "app.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/openwhyd/openwhyd.git"
  },
  "scripts": {
    "build": "scripts/transpile-bookmarklet.sh",
    "postinstall": "cp node_modules/playemjs/dist/playem-*.js public/js/",
    "start": "node app.js --fakeEmail --digestInterval -1 $@",
    "start:localdb": ". ./env-vars-testing.sh && npm start -- $@",
    "start:coverage": "npx --yes nyc --silent $(node -p 'require(`./package.json`).scripts.start') $@",
    "start:coverage:no-clean": "npx --yes nyc --silent --no-clean $(node -p 'require(`./package.json`).scripts.start') $@",
    "stop": "npx --yes kill-port --port 8080 >/dev/null",
    "test-reset": "node test/reset-test-db.js",
    "test": "make test",
    "test:functional": "npx --yes mocha test/functional/*.js --exit",
    "test:functional:coverage": "npm run coverage:clear && npx --yes nyc --silent $(node -p 'require(`./package.json`).scripts[`test:functional`]') $@",
    "test:integration": "npx --yes mocha test/integration/*.js --serial --exit",
    "test:integration:localdb": "MONGODB_HOST=localhost MONGODB_PORT=27117 npm run test:integration -- $@",
    "test:integration:coverage": "npx --yes nyc --silent --no-clean npm run test:integration:localdb -- $@",
    "test:api": "START_WITH_ENV_FILE='./env-vars-testing.conf' npm run test:api:raw -- $@",
    "test:api:raw": "npx --yes mocha test/api/*.tests.js",
    "test:api:coverage": "npm run coverage:clear && COVERAGE=true npm run test:api -- --timeout 10000 && npm run coverage:report | grep api",
    "test:unit": "npx --yes mocha test/unit/*.js --exit",
    "test:unit:coverage": "npm run coverage:clear && npx --yes nyc --silent $(node -p 'require(`./package.json`).scripts[`test:unit`]') $@",
    "test:approval:routes": "ava test/approval/routes/routes.approval.tests.js $@",
    "test:approval:routes:start": "START_WITH_ENV_FILE='./env-vars-testing.conf' npm run test:approval:routes -- $@",
    "test:approval:routes:start:update": "npm run test:approval:routes:start -- --update-snapshots",
    "test:approval:hot-tracks:raw": "npx --yes jest --runInBand test/approval/hot-tracks/hot-tracks.approval.test.js $@",
    "test:approval:hot-tracks": "PORT=8080 npm run test:approval:hot-tracks:raw -- $@",
    "test:approval:hot-tracks:start": "START_WITH_ENV_FILE='./env-vars-testing.conf' npm run test:approval:hot-tracks:raw -- $@",
    "test:approval:hot-tracks:start:approve": "npm run test:approval:hot-tracks:start -- --updateSnapshot",
    "test:approval:posting": "mocha test/approval/posting/posting.approval.tests.js $@",
    "test:approval:posting:start": "START_WITH_ENV_FILE='./env-vars-testing.conf' npm run test:approval:posting -- $@",
    "test:approval:posting:coverage": "npm run coverage:clear && COVERAGE=true npm run test:approval:posting:start -- --serial --timeout 10000 $@ && npm run coverage:report | grep post",
    "test:cypress:dev": "node_modules/.bin/cypress open --e2e --browser electron",
    "test:cypress": "node_modules/.bin/cypress run --browser electron",
    "test:3rd-party": "jest test/3rd-party/*.test.js",
    "coverage:clear": "rm -rf .nyc_output coverage",
    "coverage:report": "npx --yes nyc report --reporter=text --reporter=lcov # stores the coverage report in coverage/lcov.info",
    "coverage:summary": "npx --yes nyc report --reporter=text-summary --reporter=lcov # stores the coverage report in coverage/lcov.info",
    "lint:full": "make lint",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "lint:errors": "eslint . --quiet",
    "lint:format": "prettier . --write",
    "lint:typescript": "npx --yes --package typescript tsc --noEmit --moduleResolution node --skipLibCheck",
    "lint:jsdoc-typing": "npx --yes --package typescript tsc --target es2015 --moduleResolution node --noEmit --allowJs --skipLibCheck `find app/ -name '*.js' -name '*.d.ts'` `find test/ -name '*.js' -name '*.d.ts'`"
  },
  "directories": {
    "src": "./app",
    "config": "./config",
    "doc": "./docs",
    "test": "./test"
  },
  "dependencies": {
    "algoliasearch": "4.20.0",
    "argon2": "^0.31.0",
    "async": "*",
    "colors": "*",
    "connect-mongo": "^3.2.0",
    "dd-trace": "^4.15.0",
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "formidable": "^2.1.1",
    "hogan.js": "3.0.2",
    "htmlparser": "*",
    "mongodb": "4.17.0",
    "playemjs": "1.2.2",
    "q-set": "^2.0.8",
    "request": "2.88.2",
    "wait-on": "^7.0.1"
  },
  "devDependencies": {
    "@applitools/eyes-cypress": "^3.38.0",
    "@cypress/code-coverage": "^3.12.1",
    "@types/node": "^20.6.3",
    "@typescript-eslint/eslint-plugin": "^6.7.2",
    "@typescript-eslint/parser": "^6.7.2",
    "approvals": "^6.2.2",
    "ava": "^5.3.1",
    "cypress": "^13.2.0",
    "cypress-file-upload": "^5.0.8",
    "cypress-log-to-output": "^1.1.2",
    "eslint": "^8.49.0",
    "eslint-config-async": "^2.0.2",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-deprecation": "^2.0.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^5.0.0",
    "mocha": "10.2.0",
    "nyc": "^15.1.0",
    "prettier": "^3.0.3",
    "ts-morph": "^19.0.0",
    "typescript": "^5.2.2"
  }
}
