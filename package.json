{
  "name": "openwhyd",
  "version": "1.50.2",
  "description": "A web app for collecting, playing and sharing music from various streaming platforms: Youtube, Soundcloud, Bandcamp, Vimeo, Deezer...",
  "homepage": "https://openwhyd.org",
  "license": "MIT",
  "main": "app.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/openwhyd/openwhyd.git"
  },
  "scripts": {
    "build": "scripts/transpile-bookmarklet.sh",
    "semantic-release": "semantic-release",
    "postinstall": "npm run -s donate; cp node_modules/playemjs/dist/playem-*.js public/js/",
    "donate": "echo \"\n   *** Thanks for downloading Openwhyd! ***\nPlease consider donating to our open collective\n\n => https://opencollective.com/openwhyd/donate\n\"",
    "start": "node app.js --fakeEmail --digestInterval -1 $@",
    "start:coverage": "npx --yes nyc --silent node app.js --fakeEmail --digestInterval -1 $@",
    "start:coverage:no-clean": "npx --yes nyc --silent --no-clean node app.js $@",
    "start:localdb": "node app.js $@ --mongoDbDatabase openwhyd_test --mongoDbHost localhost --mongoDbPort 27117",
    "test-reset": "node test/reset-test-db.js",
    "test:functional": "npx --yes mocha test/functional/*.js --exit",
    "test:integration": "npx --yes mocha test/integration/*.js --serial --exit",
    "test:integration:follow": "npx --yes mocha test/integration/follow.api.tests.js --serial --exit",
    "test:integration:legacy-post": "START_WITH_ENV_FILE='./env-vars-testing.conf' mocha test/integration/legacy.post.api.tests.js $@",
    "test:integration:legacy-post:coverage": "rm -rf .nyc_output coverage && COVERAGE=true npm run test:integration:legacy-post -- --serial --timeout 10000 && npx --yes nyc report --reporter=lcov && npx --yes nyc report | grep post",
    "test:integration:post": "START_WITH_ENV_FILE='./env-vars-testing.conf' mocha test/integration/*post.api.tests.js test/integration/playlist.api.tests.js $@",
    "test:integration:post:coverage": "rm -rf .nyx_output coverage && COVERAGE=true npm run test:integration:post -- --serial --timeout 10000 && npx --yes nyc report --reporter=lcov && npx --yes nyc report | grep post",
    "test:integration:mongodb": "WITHOUT_CONSOLE_LOG=true npx --yes mocha test/integration/mongodb/*tests.js --no-deprecation --serial --exit ",
    "test:unit": "npx --yes mocha test/unit/*.js --exit",
    "test-approval": "npx --yes kill-port --port 8080 >/dev/null; DONT_KILL=1 START_WITH_ENV_FILE='./env-vars-testing.conf' ava test/approval.tests.js $@",
    "test-approval-docker": "PORT=8080 DONT_KILL=1 WHYD_GENUINE_SIGNUP_SECRET='' ava test/approval.tests.js $@",
    "test-approval-docker-update": "npm run test-approval-docker -- --update-snapshots",
    "test-approval-hot-tracks": "npx --yes kill-port --port 8080 >/dev/null; START_WITH_ENV_FILE='./env-vars-testing.conf' npx --yes jest --runInBand test/approval-hot-tracks.jest.test.js $@",
    "test:approval": "START_WITH_ENV_FILE='./env-vars-testing.conf' mocha test/approval/approval.tests.js $@",
    "test:approval:coverage": "rm -rf .nyc_output coverage && COVERAGE=true npm run test:approval -- --serial --timeout 10000 $@ && npx --yes nyc report --reporter=lcov && npx --yes nyc report | grep post",
    "test:post:coverage": "rm -rf .nyc_output coverage && COVERAGE=true npm run test:unit -- --serial && COVERAGE=true npm run test:functional -- --serial && COVERAGE=true npm run test:approval -- --serial --timeout 10000 && COVERAGE=true npm run test:integration:post -- --serial --timeout 10000 && npx --yes nyc report --reporter=lcov && npx --yes nyc report | grep post",
    "test:cypress:dev": "node_modules/.bin/cypress open",
    "test:cypress": "node_modules/.bin/cypress run",
    "test:3rd-party": "jest test/3rd-party/*.test.js",
    "test": ". ./env-vars-testing.sh && npm run test:unit && npm run test:integration && npm run test:cypress",
    "test:coverage": "npx --yes nyc report --reporter=text-summary  --reporter=lcov",
    "docker:seed": "docker-compose exec web npm run test-reset && docker-compose restart web && ./scripts/wait-for-http-server.sh 8080",
    "docker:run": "npm run docker:seed && docker-compose exec web npm run $@",
    "docker:test:cypress:dev": ". ./.env-docker && npm run test:cypress:dev",
    "docker:test:cypress": ". ./.env-docker && npm run test:cypress",
    "docker:test": "npm run docker:run test:unit && npm run docker:run test:integration && npm run docker:test:cypress",
    "docker:test-approval": "DONT_KILL=1 PORT=8080 ava test/approval.tests.js $@",
    "docker:test-approval-hot-tracks": "DONT_KILL=1 PORT=8080 npx --yes jest --runInBand test/approval-hot-tracks.jest.test.js $@",
    "docker:test:approval": "DONT_KILL=1 PORT=8080 mocha test/approval/approval.tests.js $@",
    "lint:jsdoc-typing": "npx --yes tsc --target es2015 --moduleResolution node --noEmit --allowJs --skipLibCheck `find app/ -name '*.js' -name '*.d.ts'` `find test/ -name '*.js' -name '*.d.ts'`",
    "lint:typescript": "npx --yes tsc --noEmit --moduleResolution node --skipLibCheck",
    "lint:format": "prettier . --write",
    "lint:fix": "eslint . --fix",
    "lint:errors": "eslint . --quiet",
    "lint": "eslint .",
    "lint:full": "npm run lint:jsdoc-typing && npm run lint:typescript && npm run lint:format && npm run lint"
  },
  "directories": {
    "src": "./app",
    "config": "./config",
    "doc": "./docs",
    "test": "./test"
  },
  "dependencies": {
    "algoliasearch": "4.17.0",
    "argon2": "^0.30.3",
    "async": "*",
    "colors": "*",
    "connect-mongo": "^3.2.0",
    "dd-trace": "^3.20.0",
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "formidable": "^2.1.1",
    "hogan.js": "3.0.2",
    "htmlparser": "*",
    "iconv": ">=3.0.1",
    "mongodb": "4.16.0",
    "playemjs": "1.2.2",
    "q-set": "^2.0.8",
    "request": "2.88.2",
    "wait-on": "^7.0.1"
  },
  "devDependencies": {
    "@applitools/eyes-cypress": "^3.34.1",
    "@cypress/code-coverage": "^3.11.0",
    "@types/node": "^20.4.4",
    "@typescript-eslint/eslint-plugin": "^6.1.0",
    "@typescript-eslint/parser": "^6.1.0",
    "approvals": "^6.2.1",
    "ava": "^5.3.1",
    "cypress": "^12.17.2",
    "cypress-file-upload": "^5.0.8",
    "cypress-log-to-output": "^1.1.2",
    "eslint": "^8.45.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-deprecation": "^1.4.1",
    "eslint-plugin-prettier": "^5.0.0",
    "mocha": "10.2.0",
    "nyc": "^15.1.0",
    "prettier": "^3.0.0",
    "ts-morph": "^19.0.0",
    "typescript": "^5.1.6"
  },
  "resolutions": {
    "istanbul-lib-coverage": "^3.2.0"
  },
  "release": {
    "branch": "main",
    "branches": [
      "main"
    ],
    "plugins": [
      [
        "@semantic-release/commit-analyzer",
        {
          "preset": "angular",
          "releaseRules": [
            {
              "type": "docs",
              "scope": "README",
              "release": "patch"
            },
            {
              "type": "refactor",
              "release": "patch"
            },
            {
              "type": "style",
              "release": "patch"
            }
          ],
          "parserOpts": {
            "noteKeywords": [
              "BREAKING CHANGE",
              "BREAKING CHANGES"
            ]
          }
        }
      ],
      "@semantic-release/changelog",
      "@semantic-release/git",
      "@semantic-release/npm",
      "@semantic-release/github"
    ],
    "verifyConditions": [
      "@semantic-release/github"
    ],
    "prepare": [
      {
        "path": "@semantic-release/changelog",
        "changelogFile": "CHANGELOG.md"
      },
      "@semantic-release/npm",
      {
        "path": "@semantic-release/git",
        "assets": [
          "package.json",
          "package-lock.json",
          "CHANGELOG.md"
        ],
        "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
      }
    ],
    "publish": "@semantic-release/github",
    "success": [],
    "fail": [],
    "npmPublish": false
  }
}
