name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  tests:
    name: Automated tests
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-20.04
    services:
      mongodb:
        image: docker://mongo:3.4
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 12.19.1
      - name: use npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: npm install
        env:
          CI: true
        run: npm install --prefer-offline --no-audit
      - name: Initialize database
        env:
          CI: true
        run: |
          source env-vars-testing.sh
          npm run test-reset
      - name: Start Openwhyd server
        run: |
          source env-vars-testing.sh
          npm start --mongoDbDatabase openwhyd_test &
          ./scripts/wait-for-http-server.sh 8080 # give openwhyd's server some time to start
      - name: Unit tests
        env:
          CI: true
        run: |
          source env-vars-testing.sh
          npm run test-unit
      - name: API tests
        env:
          CI: true
        run: |
          source env-vars-testing.sh
          npm run test-api

  cypress:
    name: Cypress E2E tests
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-20.04
    services:
      mongodb:
        image: docker://mongo:3.4
        ports:
          - 27017:27017
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3]
    steps:
      - uses: actions/checkout@v2
      - name: use npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: npm install
        env:
          CI: true
        run: npm install --prefer-offline --no-audit
      - name: Start Openwhyd server
        env:
          CI: true
        run: |
          source env-vars-testing.sh
          npm run start:coverage --mongoDbDatabase openwhyd_test &
          ./scripts/wait-for-http-server.sh 8080 # give openwhyd's server some time to start
      - name: Run Cypress tests
        uses: cypress-io/github-action@v2.7.2
        with:
          config-file: cypress.json
          record: true
          parallel: true
        env:
          CI: true
          # env vars for visual tests (driven by Cypress)
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          APPLITOOLS_BATCH_ID: ${{ github.sha }}
          APPLITOOLS_SERVER_URL: 'eyesapi.applitools.com'
          CYPRESS_APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          CYPRESS_APPLITOOLS_BATCH_ID: ${{ github.sha }}
          CYPRESS_APPLITOOLS_SERVER_URL: 'eyesapi.applitools.com'
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_DASHBOARD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get coverage data
        run: |
          # npm run test:coverage
          npx nyc report --reporter=lcov # stores the coverage report in coverage/lcov.info
      - name: Save code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: .nyc_output
      - name: Upload coverage to codacy
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_REPOSITORY_TOKEN_FOR_COVERAGE }}
          coverage-reports: coverage/lcov.info

  release:
    name: Release
    needs:
      - tests
      - cypress
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          # to prevent "You're not authorized to push to this branch"
          persist-credentials: false
      - uses: actions/setup-node@v2
        with:
          node-version: 12.19.1
      - name: use npm cache
        if: github.event_name == 'push'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm install --prefer-offline --no-audit
        if: github.event_name == 'push'
      - name: npx semantic-release
        run: |
          # we install just semantic-release and its plugins, without considering package.json
          mkdir "tmp-release"
          npm --prefix "tmp-release" install --no-save \
            "semantic-release@17.3.1" \
            "@semantic-release/changelog@5.0.1" \
            "@semantic-release/git@9.0.0" \
            && $(npm --prefix "tmp-release" bin)/semantic-release
          rm -rf "tmp-release"
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Create Docker tags
        id: create_docker_tags
        run: |
          echo "::set-output name=tags::latest,$(git tag -l --sort=-v:refname | head -1 | cut -c 2-)"
          # from https://github.com/jerray/publish-docker-action/issues/11#issuecomment-607077257
      - name: Publish to Docker Hub registry
        if: github.event_name == 'push'
        uses: jerray/publish-docker-action@v1.0.3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          tags: ${{ steps.create_docker_tags.outputs.tags }}

  docker:
    # To publish the Docker image from here, see https://github.com/openwhyd/openwhyd/pull/308/commits/1eacaa98885789642ba0073c9bb4d822021f0d95#diff-12a86cef0c4707531fdbabac3e38cb2aR36
    name: Docker tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Build and start services
        run: docker-compose up --build --detach
      - name: Init database for tests
        run: |
          docker-compose exec -T web npm run test-reset
          docker-compose restart web
          docker-compose exec -T web sh -c './scripts/wait-for-http-server.sh 8080'
      - name: Run unit tests
        run: docker-compose exec -T web npm run test-unit
      - name: Run API tests
        run: docker-compose exec -T web npm run test-api
